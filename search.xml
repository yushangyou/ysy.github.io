<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端跨域</title>
      <link href="/2022/10/04/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
      <url>/2022/10/04/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><pre><code>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。说白了跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</code></pre><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><pre><code>通过jsonp跨域document.domain + iframe跨域location.hash + iframewindow.name + iframe跨域postMessage跨域跨域资源共享（CORS）[主流，推荐]nginx代理跨域 [主流，推荐]node.js中间件代理跨域[推荐]WebSocket协议跨域</code></pre><h3 id="通过解决方案实现-部分用过的方式"><a href="#通过解决方案实现-部分用过的方式" class="headerlink" title="通过解决方案实现(部分用过的方式)"></a>通过解决方案实现(部分用过的方式)</h3><h4 id="通过-jsonp-跨域"><a href="#通过-jsonp-跨域" class="headerlink" title="通过 jsonp 跨域"></a>通过 jsonp 跨域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</span><br><span class="line">缺点：只能实现get一种请求。</span><br><span class="line"></span><br><span class="line">原生实现：</span><br><span class="line">    var script = document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span><br><span class="line">    script.src = <span class="string">&#x27;http://www.aaa2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line">    document.head.appendChild(script);</span><br><span class="line">    // 回调执行函数</span><br><span class="line">    <span class="keyword">function</span> handleCallback(res) &#123;</span><br><span class="line">    alert(JSON.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line">    // 服务端返回如下（返回时即执行全局函数）：</span><br><span class="line">    handleCallback(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">AJAX实现</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://www.aaa2.com:8080/login&#x27;</span>,</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    dataType: <span class="string">&#x27;jsonp&#x27;</span>,  // 请求方式为jsonp</span><br><span class="line">    jsonpCallback: <span class="string">&quot;handleCallback&quot;</span>,    // 自定义回调函数名</span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">vue.js(axios)实现</span><br><span class="line">    this.axios.jsonp(<span class="string">&#x27;http://www.aaa2.com:8080/login&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">&#x27;handleCallback&#x27;</span></span><br><span class="line">    &#125;).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">    &#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="通过-document-domain-iframe-跨域-具体实现自行百度"><a href="#通过-document-domain-iframe-跨域-具体实现自行百度" class="headerlink" title="通过 document.domain + iframe 跨域(具体实现自行百度)"></a>通过 document.domain + iframe 跨域(具体实现自行百度)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</span><br><span class="line">缺点：此方案仅限主域相同，子域不同的跨域应用场景。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过-location-hash-iframe-跨域-具体实现自行百度"><a href="#通过-location-hash-iframe-跨域-具体实现自行百度" class="headerlink" title="通过 location.hash + iframe 跨域(具体实现自行百度)"></a>通过 location.hash + iframe 跨域(具体实现自行百度)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</span><br><span class="line">缺点：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过<span class="built_in">hash</span>值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象</span><br></pre></td></tr></table></figure><h4 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</span><br><span class="line">    目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</span><br><span class="line">    注意：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文nginx反向代理中设置proxy_cookie_domain和NodeJs中间件代理中cookieDomainRewrite参数的设置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">原生ajax：(前端设置)：</span><br><span class="line">    // 前端设置是否带cookie</span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">示例代码</span><br><span class="line">    var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容</span><br><span class="line">    // 前端设置是否带cookie</span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">    xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">    xhr.send(<span class="string">&#x27;user=admin&#x27;</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue.js实现</span><br><span class="line">    // axios</span><br><span class="line">    axios.defaults.withCredentials = <span class="literal">true</span></span><br><span class="line">    // vue-resource</span><br><span class="line">    Vue.http.options.credentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="nginx-反向代理接口跨域"><a href="#nginx-反向代理接口跨域" class="headerlink" title="nginx 反向代理接口跨域"></a>nginx 反向代理接口跨域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</span><br><span class="line">    通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx具体配置：</span><br><span class="line">    // proxy服务器</span><br><span class="line">    server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.aaa1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass   http://www.aaa2.com:8080;  // 反向代理</span><br><span class="line">      proxy_cookie_domain www.aaa2.com www.aaa1.com; // 修改cookie里域名</span><br><span class="line">      index  index.html index.htm;</span><br><span class="line">      // 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">      add_header Access-Control-Allow-Origin http://www.aaa1.com;  // 当前端只跨域不带cookie时，可为*</span><br><span class="line">      add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">前端代码示例：</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    // 前端开关：浏览器是否读写cookie</span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">    // 访问nginx中的代理服务器</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.aaa1.com:81/?user=admin&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br></pre></td></tr></table></figure><h4 id="Nodejs-代理跨域"><a href="#Nodejs-代理跨域" class="headerlink" title="Nodejs 代理跨域"></a>Nodejs 代理跨域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    这里只说明vue框架跨域（1次跨域）</span><br><span class="line">利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">webpack.config.js部分配置：</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    module: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">      proxy: [&#123;</span><br><span class="line">        context: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        target: <span class="string">&#x27;http://www.aaa2.com:8080&#x27;</span>,  // 代理跨域目标接口</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,  // 当代理某些https服务报错时用</span><br><span class="line">        cookieDomainRewrite: <span class="string">&#x27;www.aaa1.com&#x27;</span>  // 可以为<span class="literal">false</span>，表示不修改</span><br><span class="line">      &#125;],</span><br><span class="line">      noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用</title>
      <link href="/2022/09/27/Hexo%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/27/Hexo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hexo-安装教程"><a href="#Hexo-安装教程" class="headerlink" title="Hexo 安装教程"></a>Hexo 安装教程</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>node.js : <a href="https://nodejs.org/en/">下载</a><br>Hexo : <a href="https://hexo.io/zh-cn/">下载</a></p><figure class="highlight bash"><figcaption><span>（安装出现问题自行百度）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli // 下载hexo</span><br><span class="line">hexo -v // 查看是否安装成功</span><br><span class="line">hexo init // 初始化hexo文件夹</span><br><span class="line">npm install // 下载模块依赖</span><br><span class="line">npm install -g // 全局下载模块依赖</span><br></pre></td></tr></table></figure><h3 id="配置-HEXO"><a href="#配置-HEXO" class="headerlink" title="配置 HEXO"></a>配置 HEXO</h3><p>当我们安装完毕的时候，就需要对 Hexo 进行一些配置，具体是通过_config.yml 文件来完成的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.deploy_git</span><br><span class="line">node_modules //包所需要的依赖</span><br><span class="line">public // 静态网页存储的目录</span><br><span class="line">scaffolds // 样本</span><br><span class="line"><span class="built_in">source</span> // 我们自己的md文件</span><br><span class="line">themes // 主题文件</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml // 配置</span><br><span class="line">db.json</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 删除public文件的内容</span><br><span class="line">hexo g // 生成静态文件到public</span><br><span class="line">hexo s // 本地运行</span><br></pre></td></tr></table></figure><h3 id="发布到服务器"><a href="#发布到服务器" class="headerlink" title="发布到服务器"></a>发布到服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 删除public文件的内容</span><br><span class="line">hexo g // 生成静态文件到public</span><br><span class="line">hexo d // 发布静态文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用数组方法(持续更新中...)</title>
      <link href="/2022/09/20/%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/20/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>什么是<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/3794097?fr=aladdin">数组</a></p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.it610.com%2Fimage%2Finfo9%2Fcaf333751d2a45cfb021a9cab87d9057.gif&refer=http%3A%2F%2Fimg.it610.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671677418&t=7b40a714d3709b784ce6e39c9d54c6f8"><h3 id="数组原型方法主要有以下这些"><a href="#数组原型方法主要有以下这些" class="headerlink" title="数组原型方法主要有以下这些"></a>数组原型方法主要有以下这些</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">join</span>()：用指定的分隔符将数组每一项拼接为字符串</span><br><span class="line">push() ：向数组的末尾添加新元素</span><br><span class="line">pop()：删除数组的最后一项</span><br><span class="line"><span class="built_in">shift</span>()：删除数组的第一项</span><br><span class="line">unshift()：向数组首位添加新元素</span><br><span class="line">slice()：按照条件查找出其中的部分元素</span><br><span class="line">splice()：对数组进行增删改</span><br><span class="line">fill(): 方法能使用特定值填充数组中的一个或多个元素</span><br><span class="line">filter():“过滤”功能</span><br><span class="line">concat()：用于连接两个或多个数组</span><br><span class="line">indexOf()：检测当前值在数组中第一次出现的位置索引</span><br><span class="line">lastIndexOf()：检测当前值在数组中最后一次出现的位置索引</span><br><span class="line">every()：判断数组中每一项都是否满足条件</span><br><span class="line">some()：判断数组中是否存在满足条件的项</span><br><span class="line">includes()：判断一个数组是否包含一个指定的值</span><br><span class="line"><span class="built_in">sort</span>()：对数组的元素进行排序</span><br><span class="line">reverse()：对数组进行倒序</span><br><span class="line">forEach()：ES5 及以下循环遍历数组每一项</span><br><span class="line">map()：ES6 循环遍历数组每一项</span><br><span class="line">copyWithin():用于从数组的指定位置拷贝元素到数组的另一个指定位置中</span><br><span class="line">find():返回匹配的值</span><br><span class="line">findIndex():返回匹配位置的索引</span><br><span class="line">toLocaleString()、toString():将数组转换为字符串</span><br><span class="line">flat()、flatMap()：扁平化数组</span><br><span class="line">entries() 、keys() 、values():遍历数组</span><br></pre></td></tr></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h3><pre><code>join()方法用于把数组中的所有元素转换一个字符串。元素是通过指定的分隔符进行分隔的,默认使用逗号作为分隔符</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">console.log(arr.join());   // 1,2,3</span><br><span class="line">console.log(arr.join(<span class="string">&quot;-&quot;</span>));   // 1-2-3</span><br><span class="line">console.log(arr);   // [1, 2, 3]（原数组不变）</span><br></pre></td></tr></table></figure><pre><code>通过 join()方法可以实现重复字符串，只需传入字符串以及重复的次数，就能返回重复后的字符串，函数如下：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> repeatString(str, n) &#123;</span><br><span class="line">//一个长度为n+1的空数组用string去拼接成字符串,就成了n个string的重复</span><br><span class="line"> <span class="built_in">return</span> new Array(n + 1).<span class="built_in">join</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">console.log(repeatString(<span class="string">&quot;abc&quot;</span>, 3));   // abcabcabc</span><br><span class="line">console.log(repeatString(<span class="string">&quot;Hi&quot;</span>, 5));   // HiHiHiHiHi</span><br></pre></td></tr></table></figure><h3 id="push-和-pop"><a href="#push-和-pop" class="headerlink" title="push()和 pop()"></a>push()和 pop()</h3><pre><code>push() 方法从数组末尾向数组添加元素，可以添加一个或多个元素。pop() 方法用于删除数组的最后一个元素并返回删除的元素。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;Tom&quot;</span>];</span><br><span class="line">var count = arr.push(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sean&quot;</span>);</span><br><span class="line">console.log(count);  // 5</span><br><span class="line">console.log(arr);   // [<span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Sean&quot;</span>]</span><br><span class="line">var item = arr.pop();</span><br><span class="line">console.log(item);   // Sean</span><br><span class="line">console.log(arr);   // [<span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="shift-和-unshift"><a href="#shift-和-unshift" class="headerlink" title="shift() 和 unshift()"></a>shift() 和 unshift()</h3><pre><code>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;Tom&quot;</span>];</span><br><span class="line">var count = arr.unshift(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sean&quot;</span>);</span><br><span class="line">console.log(count);   // 5</span><br><span class="line">console.log(arr);   //[<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line">var item = arr.shift();</span><br><span class="line">console.log(item);   // Jack</span><br><span class="line">console.log(arr);   // [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><pre><code>sort() 方法用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。默认排序顺序为按字母升序。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line">console.log(arr1.sort());   // [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">arr2 = [13, 24, 51, 3];</span><br><span class="line">console.log(arr2.sort());   // [13, 24, 3, 51]</span><br><span class="line">console.log(arr2);   // [13, 24, 3, 51](元数组被改变)</span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><pre><code>reverse() 方法用于颠倒数组中元素的顺序</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [13, 24, 51, 3];</span><br><span class="line">console.log(arr.reverse());   //[3, 51, 24, 13]</span><br><span class="line">console.log(arr);   //[3, 51, 24, 13](原数组改变)</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><pre><code>concat() 方法用于连接两个或多个数组,该方法不会改变现有的数组</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7];</span><br><span class="line">var arrCopy = arr.concat(9,[11,13]);</span><br><span class="line">console.log(arrCopy);   //[1, 3, 5, 7, 9, 11, 13]</span><br><span class="line">console.log(arr);   // [1, 3, 5, 7](原数组未被修改)</span><br></pre></td></tr></table></figure><pre><code>从上面测试结果可以发现：传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。但是如果传入的是一个二维数组呢？</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arrCopy2 = arr.concat([9,[11,13]]);</span><br><span class="line">console.log(arrCopy2);   //[1, 3, 5, 7, 9, Array[2]]</span><br><span class="line">console.log(arrCopy2[5]);   //[11, 13]</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><pre><code>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项，但不包括结束位置的项。当出现负数时，将负数加上 数组长度的值 来替换该位置的数</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,9,11];</span><br><span class="line">var arrCopy = arr.slice(1);</span><br><span class="line">var arrCopy2 = arr.slice(1,4);</span><br><span class="line">var arrCopy3 = arr.slice(1,-2);//相当于arr.slice(1,4)</span><br><span class="line">var arrCopy4 = arr.slice(-4,-1);//相当于arr.slice(2,5)</span><br><span class="line">console.log(arr);   //[1, 3, 5, 7, 9, 11](原数组没变)</span><br><span class="line">console.log(arrCopy);   //[3, 5, 7, 9, 11]</span><br><span class="line">console.log(arrCopy2);   //[3, 5, 7]</span><br><span class="line">console.log(arrCopy3);   //[3, 5, 7]</span><br><span class="line">console.log(arrCopy4);   //[5, 7, 9]</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><pre><code>splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。</code></pre><h4 id="1-删除元素-并返回删除的元素"><a href="#1-删除元素-并返回删除的元素" class="headerlink" title="1.删除元素,并返回删除的元素"></a>1.删除元素,并返回删除的元素</h4><pre><code>可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,9,11];</span><br><span class="line">var arrRemoved = arr.splice(0,2);</span><br><span class="line">console.log(arr);   //[5, 7, 9, 11]</span><br><span class="line">console.log(arrRemoved);   //[1, 3]</span><br></pre></td></tr></table></figure><h4 id="2-向指定索引处添加元素"><a href="#2-向指定索引处添加元素" class="headerlink" title="2.向指定索引处添加元素"></a>2.向指定索引处添加元素</h4><pre><code>可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入 4 和 6</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [22, 3, 31, 12];</span><br><span class="line">array1.splice(1, 0, 12, 35);  //[]</span><br><span class="line">console.log(array1); // [22, 12, 35, 3, 31, 12]</span><br></pre></td></tr></table></figure><h4 id="3-替换指定索引位置的元素"><a href="#3-替换指定索引位置的元素" class="headerlink" title="3.替换指定索引位置的元素"></a>3.替换指定索引位置的元素</h4><pre><code>可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const array1 = [22, 3, 31, 12];</span><br><span class="line">array1.splice(1, 1, 8);   //[3]</span><br><span class="line">console.log(array1);  // [22, 8, 31, 12]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进行简单的大屏适配</title>
      <link href="/2022/09/19/%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/09/19/%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="公共-style-文件下创建-Common-sass-文件进行配置"><a href="#公共-style-文件下创建-Common-sass-文件进行配置" class="headerlink" title="公共 style 文件下创建 Common.sass 文件进行配置"></a>公共 style 文件下创建 Common.sass 文件进行配置</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@use <span class="string">&quot;sass:math&quot;</span>;</span><br><span class="line"><span class="comment">//根据页面宽度做适配</span></span><br><span class="line">@<span class="keyword">function</span> <span class="title function_">vw</span>(<span class="params">$px</span>) &#123;</span><br><span class="line">  @<span class="keyword">return</span> (math.<span class="title function_">div</span>(<span class="number">100</span>,<span class="number">1920</span>)) * $px + vw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据页面高度做适配</span></span><br><span class="line">@<span class="keyword">function</span> <span class="title function_">vh</span>(<span class="params">$px</span>) &#123;</span><br><span class="line">  @<span class="keyword">return</span> (math.<span class="title function_">div</span>(<span class="number">100</span>,<span class="number">1080</span>)) * $px + vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置字体及颜色</span></span><br><span class="line">@mixin <span class="title function_">font</span>(<span class="params">$family,$size,$color:#FFF</span>) &#123;</span><br><span class="line">  <span class="attr">color</span>: $color;</span><br><span class="line">  <span class="attr">font</span>: &#123;</span><br><span class="line">    <span class="attr">family</span>: $family;</span><br><span class="line">    <span class="attr">size</span>: <span class="title function_">vw</span>($size);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·<br>·<br>·<br>·</p><h1 id="在外部-sass-文件进行调用"><a href="#在外部-sass-文件进行调用" class="headerlink" title="在外部 sass 文件进行调用"></a>在外部 sass 文件进行调用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;src/Style/Common&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">width</span>: <span class="title function_">vw</span>(<span class="number">100</span>)</span><br><span class="line"><span class="attr">height</span>: <span class="title function_">vh</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
